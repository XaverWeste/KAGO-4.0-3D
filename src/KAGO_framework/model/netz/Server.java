package KAGO_framework.model.netz;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.net.ServerSocket;import java.net.Socket;import java.util.ArrayList;public abstract class Server {    private final NewConnectionHandler connectionHandler;    private final ArrayList<ClientMessageHandler> messageHandlers;    private class NewConnectionHandler extends Thread{        private ServerSocket serverSocket;        private boolean active;        public NewConnectionHandler(int pPort) {            try {                serverSocket = new ServerSocket(pPort);                start();                active = true;            }catch (Exception e){                serverSocket = null;                active = false;            }        }        public void run(){            while (active){                try{                    Socket clientSocket = serverSocket.accept();                    addNewClientMessageHandler(clientSocket);                    processNewConnection(clientSocket.getInetAddress().getHostAddress(),clientSocket.getPort());                }catch(IOException ignored){}            }        }        public void close() {            active = false;            if(serverSocket != null)                try{                    serverSocket.close();                }catch (IOException ignored){ }        }    }    private class ClientMessageHandler extends Thread {        private final ClientSocketWrapper socketWrapper;        private boolean active;        private class ClientSocketWrapper {            private Socket clientSocket;            private BufferedReader fromClient;            private PrintWriter toClient;            public ClientSocketWrapper(Socket pSocket) {                try{                    clientSocket = pSocket;                    toClient = new PrintWriter(clientSocket.getOutputStream(), true);                    fromClient = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));                }catch(IOException e){                    clientSocket = null;                    toClient = null;                    fromClient = null;                }            }            public String receive() {                if(fromClient != null)                    try {                        return fromClient.readLine();                    }catch (IOException ignored){}                return(null);            }            public void send(String pMessage) {                if(toClient != null) toClient.println(pMessage);            }            public String getClientIP(){                if(clientSocket != null) return(clientSocket.getInetAddress().getHostAddress());                else return(null);            }            public int getClientPort() {                if(clientSocket != null) return(clientSocket.getPort());                else return(0);            }            public void close() {                if(clientSocket != null)                    try {                        clientSocket.close();                    }catch(IOException ignored) {}            }        }        private ClientMessageHandler(Socket pClientSocket) {            socketWrapper = new ClientSocketWrapper(pClientSocket);            if(pClientSocket!=null) {                start();                active = true;            }else active = false;        }        public void run() {            String message;            while (active) {                message = socketWrapper.receive();                if (message != null) processMessage(socketWrapper.getClientIP(), socketWrapper.getClientPort(), message);                else{                    ClientMessageHandler aMessageHandler = findClientMessageHandler(socketWrapper.getClientIP(), socketWrapper.getClientPort());                    if (aMessageHandler != null){                        aMessageHandler.close();                        removeClientMessageHandler(aMessageHandler);                        processClosingConnection(socketWrapper.getClientIP(), socketWrapper.getClientPort());                    }                }            }        }        public void send(String pMessage) {            if(active) socketWrapper.send(pMessage);        }        public void close() {            if(active) {                active=false;                socketWrapper.close();            }        }        public String getClientIP() {            return(socketWrapper.getClientIP());        }        public int getClientPort() {            return(socketWrapper.getClientPort());        }    }    public Server(int pPort) {        connectionHandler = new NewConnectionHandler(pPort);        messageHandlers = new ArrayList<>();    }        public boolean isOpen() {    	return(connectionHandler.active);    }        public boolean isConnectedTo(String pClientIP, int pClientPort) {    	 ClientMessageHandler aMessageHandler = findClientMessageHandler(pClientIP, pClientPort);         if (aMessageHandler != null) return(aMessageHandler.active);         else return(false);    }    public void send(String pClientIP, int pClientPort, String pMessage) {        ClientMessageHandler aMessageHandler = this.findClientMessageHandler(pClientIP, pClientPort);        if (aMessageHandler != null) aMessageHandler.send(pMessage);    }    public void sendToAll(String pMessage) {    	synchronized(messageHandlers) {    	    for(ClientMessageHandler c:messageHandlers) c.send(pMessage);    	}    }        public void closeConnection(String pClientIP, int pClientPort) {        ClientMessageHandler aMessageHandler = findClientMessageHandler(pClientIP, pClientPort);        if (aMessageHandler != null) {            processClosingConnection(pClientIP, pClientPort);            aMessageHandler.close();            removeClientMessageHandler(aMessageHandler);        }    }    public void close() {        connectionHandler.close();        synchronized(messageHandlers) {        	ClientMessageHandler aMessageHandler;        	for(ClientMessageHandler c:messageHandlers){                aMessageHandler = c;                processClosingConnection(aMessageHandler.getClientIP(), aMessageHandler.getClientPort());                aMessageHandler.close();                messageHandlers.remove(aMessageHandler);            }        }    }    public abstract void processNewConnection(String pClientIP, int pClientPort);    public abstract void processMessage(String pClientIP, int pClientPort, String pMessage);    public abstract void processClosingConnection(String pClientIP, int pClientPort);           private void addNewClientMessageHandler(Socket pClientSocket){    	synchronized(messageHandlers){    		messageHandlers.add(new ClientMessageHandler(pClientSocket));    	}    }    private void removeClientMessageHandler(ClientMessageHandler pClientMessageHandler) {    	synchronized(messageHandlers){            for(ClientMessageHandler c:messageHandlers){                if(c==pClientMessageHandler){                    messageHandlers.remove(c);                    return;                }            }    	}    }    private ClientMessageHandler findClientMessageHandler(String pClientIP, int pClientPort) {    	synchronized(messageHandlers) {            for(ClientMessageHandler c:messageHandlers) if (c.getClientIP().equals(pClientIP) && c.getClientPort() == pClientPort) return (c);    		return null;    	}    }}